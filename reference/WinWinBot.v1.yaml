openapi: 3.0.0
info:
  title: WinWinBot
  version: '1.0'
  description: |-
    > #### To use the basic api endpoints, you need to authorize through **Auth/Login** endpoint and get your **OAuth** params.
    ```json
    Example: { "token": "123", "token_type": "Bearer" }
    ```

    > #### These parameters will need to be **attached** to **each** request in the **headers** with parameter name **authorization**. There must be a **space** between these parameters.

    ```json
    Example: { "authorization": "Bearer 123" }
    ```
servers:
  - url: 'http://my.winwinbot.com/api'
paths:
  /auth/login:
    post:
      summary: Login
      tags:
        - auth
      responses:
        '200':
          description: |-
            <!-- theme: success -->
            > #### If **api** param = **1**, then response is **object** with token params.

            > #### Else **url** for frontend authorization.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      token:
                        type: string
                      token_type:
                        type: string
                      user:
                        $ref: ../models/user/User.v1.yaml
                    required:
                      - token
                      - token_type
                      - user
                  - type: string
              examples: {}
      operationId: post-auth-login
      parameters:
        - schema:
            type: string
            maxLength: 255
          in: query
          name: email
          required: true
        - schema:
            type: string
            minLength: 8
            maxLength: 255
          in: query
          name: password
          required: true
          description: ''
        - schema:
            type: boolean
          in: query
          name: api
          description: login type
      description: '> #### Endpoint for **authorization**.'
  /auth/logout:
    get:
      summary: Logout
      tags:
        - auth
      responses: {}
      operationId: get-auth-logout
      security:
        - OAuth: []
      description: "> #### Endpoint for **deactivation** current token. \n\n<!-- theme: success -->\n> #### After **success** logout you will be redirected to **home** page."
      requestBody: {}
  '/chats/{chat_id}/subscribers':
    parameters:
      - schema:
          type: integer
        name: chat_id
        in: path
        required: true
    get:
      summary: Subscriber Get
      tags:
        - chat
        - subscriber
      responses:
        '200':
          description: |-
            <!-- theme: success -->
            > #### If param **count** = **1**, then response is **count** object of specified models.
            <!-- theme: success -->
            > #### Else response is object with models.
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      count:
                        type: integer
                      count_word:
                        type: string
                      chat:
                        $ref: ../models/chat/ChatShort.v1.yaml
                  - properties:
                      items:
                        type: array
                        items:
                          allOf:
                            - $ref: ../models/chat/subscriber/ChatSubscriber.v1.yaml
                      chat:
                        $ref: ../models/chat/ChatShort.v1.yaml
                type: object
        '':
          description: ''
      operationId: get-chat-chat_id-subscribers
      parameters:
        - schema:
            type: integer
            minimum: 1
          in: query
          name: id
          description: 'Get models from specified **id**'
        - schema:
            type: integer
            minimum: 1
            maximum: 2
          in: query
          name: type_id
          description: |-
            Get models from specified **type_id**

            More info in **ChatSubscriberType** model
        - schema:
            type: integer
            minimum: 1
          in: query
          name: filter_id
          description: 'Get models from specified **filter_id**'
        - schema:
            type: boolean
          in: query
          name: count
          description: 'Get **number** of models'
        - schema:
            type: string
          in: query
          name: search
          description: 'Get models whose fields **first_name**, **last_name**, **username** contain this param'
        - schema:
            type: integer
            maximum: 10000
            minimum: 1
          in: query
          name: limit
          description: 'Limit **number** of models in response'
        - schema:
            type: boolean
          in: query
          name: with_trashed
          description: 'Append **unsubscribed** models to response'
        - schema:
            type: boolean
          in: query
          name: with_chat
          description: 'Append **ChatShort** model to response'
        - schema:
            type: string
          in: header
          name: i18n-lang
          description: "For a query with **count** parameter, you can specify the language (**ru**, **en**, **es**, **hu**) of declining the number of subscribers. \n\nDefault lang is **en**."
        - schema:
            type: boolean
          in: query
          name: with_pagination
          required: true
          description: 'Using **api** set this param to **0**. Else response will be **paginated**.'
      requestBody: {}
      security:
        - OAuth: []
      description: '> #### Endpoint is used to get **ChatSubscriber** models from specific chat-bot.'
  '/chats/{chat_id}/subscribers/{subscriber_id}':
    parameters:
      - schema:
          type: integer
        name: chat_id
        in: path
        required: true
      - schema:
          type: integer
        name: subscriber_id
        in: path
        required: true
    put:
      summary: Subscriber Update
      tags:
        - chat
        - subscriber
      responses:
        '200':
          description: |-
            <!-- theme: success -->
            > #### Updated **ChatSubscriber** model
          content:
            application/json:
              schema:
                $ref: ../models/chat/subscriber/ChatSubscriber.v1.yaml
      operationId: put-chat-chat_id-subscribers-subscriber
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                info:
                  type: array
                  items:
                    allOf:
                      - $ref: ../models/chat/subscriber/ChatSubscriberInfo.v1.yaml
              required:
                - info
        description: ' '
      description: '> #### Endpoint is used to update **info** fields of specific **ChatSubscriber** model.'
      security:
        - OAuth: []
    delete:
      summary: Subscriber Delete
      tags:
        - chat
        - subscriber
      responses:
        '200':
          description: |-
            <!-- theme: success -->

            > #### Updated **ChatSubscriber** model
          content:
            application/json:
              schema:
                $ref: ../models/chat/subscriber/ChatSubscriber.v1.yaml
      operationId: delete-chat-chat_id-subscribers-subscriber
      description: '> #### Endpoint is used to delete **ChatSubscriber** model from **testers**.'
  '/chats/{chat_id}/subscriber-form':
    parameters:
      - schema:
          type: string
        name: chat_id
        in: path
        required: true
    get:
      summary: Subscriber-Form Get
      tags:
        - chat
        - form
      responses:
        '200':
          description: |-
            <!-- theme: success -->

            > #### **ChatSubscriberForm** model
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: ../models/chat/form/ChatSubscriberForm.v1.yaml
                  - type: object
                    properties:
                      form:
                        $ref: ../models/chat/form/ChatSubscriberForm.v1.yaml
                      chat:
                        $ref: ../models/chat/ChatShort.v1.yaml
      operationId: get-chat-chat_id-subscriber-form
      description: '> #### Endpoint is used to get **ChatSubscriberForm model** from specific chat-bot.'
      parameters:
        - schema:
            type: boolean
          in: query
          name: with_chat
          description: 'Append **ChatShort** model to response'
  '/chats/{chat_id}/webhooks':
    parameters:
      - schema:
          type: string
        name: chat_id
        in: path
        required: true
    post:
      summary: Webhook Store
      tags:
        - chat
        - webhook
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: ../models/webhook/Webhook.v1.yaml
      operationId: post-chats-chat_id-webhook
      description: '> #### Endpoint is used to create **Webhook** model.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: URL for webhook notifications
              required:
                - url
        description: "<!-- theme: success -->\n> #### Response is **Webhook** model which contains **token** attribute. Store **token** value in a **safe** place.\n\n<!-- theme: warning -->\n> #### After creating the model, the webhook is in the **initialization** status and you need to **activate** it. \n> #### More information is available in **Webhook Activation** endpoint."
    get:
      summary: Webhook Get
      tags:
        - chat
        - webhook
      responses: {}
      operationId: get-chats-chat_id-webhook
      description: |-
        <!-- theme: info -->
        > #### Endpoint is used to get **Webhook** models from a specific chat-bot.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: ../models/webhook/Webhook.v1.yaml
                - type: array
                  items:
                    allOf:
                      - $ref: ../models/webhook/Webhook.v1.yaml
        description: "<!-- theme: success-->\n> #### If you specified **id**, then response is **Webhook** model. \n> #### Else - **array** of **Webhook** models."
      parameters:
        - schema:
            type: integer
            minimum: 1
          in: query
          name: id
          description: 'Get models from specified **id**'
        - schema:
            type: boolean
          in: query
          name: with_pagination
          description: 'Using **api** set this param to **0**. Else response will be **paginated**.'
          required: true
  '/chats/{chat_id}/webhooks/{webhook_id}':
    parameters:
      - schema:
          type: string
        name: chat_id
        in: path
        required: true
      - schema:
          type: string
        name: webhook_id
        in: path
        required: true
    put:
      summary: Webhook Activation
      tags:
        - chat
        - webhook
      responses: {}
      operationId: put-chats-chat_id-webhooks-webhook_id
      description: |-
        > #### Endpoint is used to **activate** Webhook model from a specific chat-bot.

        > #### To **activate** the webhook, we will send a **POST** request to the **URL** specified in the Webhook model.

        > #### In response, you need to return a **json** object containing the **token** attribute and its **value** from current Webhook model.

        ```json
        Example: { "token": "123" }
        ```
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/webhook/Webhook.v1.yaml
          application/xml:
            schema:
              type: object
              properties: {}
        description: |-
          <!-- theme: success -->
          > #### After **successful** activation you will get updated model with a new **status_id**. More info in **WebhookStatus** model.
          <!-- theme: success -->
          > #### Each time you **get** a new subscriber or if the information in the existing one has **changed**, we will send a **POST** request to the specified **url** containing the **json** object.
          ```json
          Example: { "subscriber": {id: 1, name: 'Alex', ...}, "token": "123" }
          ```

          <!-- theme: success -->
          > #### In response, you need to return a **json** object containing the **token** attribute and its **value** from current Webhook model.

          ```json
          Example: { "token": "123" }
          ```

          <!-- theme: danger-->
          > #### If response is **incorrect**, then the **status** of the webhook will be **changed** and webhook will be **stopped**.
    delete:
      summary: Webhook Deactivation
      operationId: delete-chats-chat_id-webhooks-webhook_id
      responses:
        '200':
          description: |-
            <!-- theme: success-->
            > #### **Success** response is **1**.
            <!-- theme: danger-->
            > #### **Wrong** response is **0**.
          content:
            application/json:
              schema:
                type: integer
      description: '> #### Endpoint is used to **deactivate** Webhook model from a specific chat-bot.'
      tags:
        - chat
        - webhook
components:
  schemas: {}
  securitySchemes:
    OAuth:
      name: authorization
      type: apiKey
      in: header
